"use strict";

require("core-js/modules/es.symbol.description.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.array.includes.js");
require("core-js/modules/es.string.includes.js");
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const Echo = props => {
  var _props$cameraOrbit;
  const urlBase = "https://api.echo3d.co/query?key=";
  const [modelSource, setModelSource] = (0, _react.useState)("");
  const [isLoading, setLoading] = (0, _react.useState)(true);
  const camera_controls = props.cameraControls ? {} : {
    "camera-controls": ""
  };
  const auto_rotate = props.autoRotate ? {} : {
    "auto-rotate": ""
  };
  //width 100% is always applied to ensure <model-viewer/> width follows that of the enclosing parent div
  const defaultHeight = "600px";
  const defaultWidth = "400px";
  const baseStyle = props.className ? {
    width: '100%'
  } : {
    width: '100%',
    height: defaultHeight
  };
  async function getHologramSrc() {
    if (props.src && props.src.length > 0) {
      setModelSource(props.src);
      setLoading(false);
      return;
    } else if (!props.apiKey || !props.entryID) {
      console.error("Echo viewer requires defined 'src' or 'apiKey' and 'entryID' properties.");
      setLoading(false);
      return;
    }
    const queryUrl = "".concat(urlBase).concat(props.apiKey, "&entries=").concat(props.entryID).concat(props.securityKey && props.securityKey.length > 0 ? "&secKey=" + props.securityKey : "");
    const response = await fetch(queryUrl);
    if (response.ok) {
      const data = await response.json();
      //if original model was glb then base hologram object storageID is what we want
      const originalModelStorageID = data["db"][props.entryID]["hologram"]["storageID"];
      const glbStorageID = originalModelStorageID.includes("glb") ? originalModelStorageID : data["db"][props.entryID]["additionalData"]["glbHologramStorageID"];
      setModelSource("".concat(queryUrl, "&file=").concat(glbStorageID));
      setLoading(false);
    } else {
      console.error("Echo viewer encountered error with request: " + response.status + response.statusText);
    }
  }
  (0, _react.useEffect)(() => {
    getHologramSrc();
  }, []);
  return isLoading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {}) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: props.className,
    style: props.className ? {} : {
      height: defaultHeight,
      width: defaultWidth
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("model-viewer", _objectSpread(_objectSpread(_objectSpread({
      src: modelSource,
      style: baseStyle,
      "ios-src": "",
      "shadow-intensity": "1",
      "camera-orbit": (_props$cameraOrbit = props.cameraOrbit) !== null && _props$cameraOrbit !== void 0 ? _props$cameraOrbit : ""
    }, camera_controls), auto_rotate), {}, {
      "disable-zoom": true,
      "disable-tap": props.tapToRecenter ? undefined : "true",
      autoplay: true,
      loading: "eager",
      alt: "3D model powered by echo3D"
    }))
  });
};
var _default = Echo;
exports.default = _default;